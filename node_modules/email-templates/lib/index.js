"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const fs = require('fs');

const path = require('path');

const debug = require('debug')('email-templates');

const htmlToText = require('html-to-text');

const I18N = require('@ladjs/i18n');

const autoBind = require('auto-bind');

const nodemailer = require('nodemailer');

const consolidate = require('consolidate');

const previewEmail = require('preview-email');

const _ = require('lodash');

const _Promise = require('bluebird');

const getPaths = require('get-paths');

const juiceResources = require('juice-resources-promise');

const env = (process.env.NODE_ENV || 'development').toLowerCase();

const stat = _Promise.promisify(fs.stat);

const readFile = _Promise.promisify(fs.readFile);

class Email {
  constructor(config = {}) {
    debug('config passed %O', config); // 2.x backwards compatible support

    if (config.juiceOptions) {
      config.juiceResources = config.juiceOptions;
      delete config.juiceOptions;
    }

    if (config.disableJuice) {
      config.juice = false;
      delete config.disableJuice;
    }

    if (config.render) {
      config.customRender = true;
    }

    this.config = _.merge({
      views: {
        // directory where email templates reside
        root: path.resolve('emails'),
        options: {
          // default file extension for template
          extension: 'pug',
          map: {
            hbs: 'handlebars',
            njk: 'nunjucks'
          },
          engineSource: consolidate
        },
        // locals to pass to templates for rendering
        locals: {
          // pretty is automatically set to `false` for subject/text
          pretty: true
        }
      },
      // <https://nodemailer.com/message/>
      message: {},
      send: !['development', 'test'].includes(env),
      preview: env === 'development',
      // <https://github.com/ladjs/i18n>
      // set to an object to configure and enable it
      i18n: false,
      // pass a custom render function if necessary
      render: this.render.bind(this),
      customRender: false,
      // force text-only rendering of template (disregards template folder)
      textOnly: false,
      // <https://github.com/werk85/node-html-to-text>
      htmlToText: {
        ignoreImage: true
      },
      subjectPrefix: false,
      // <https://github.com/Automattic/juice>
      juice: true,
      juiceResources: {
        preserveImportant: true,
        webResources: {
          relativeTo: path.resolve('build'),
          images: false
        }
      },
      // pass a transport configuration object or a transport instance
      // (e.g. an instance is created via `nodemailer.createTransport`)
      // <https://nodemailer.com/transports/>
      transport: {}
    }, config); // override existing method

    this.render = this.config.render;
    if (!_.isFunction(this.config.transport.sendMail)) this.config.transport = nodemailer.createTransport(this.config.transport);
    debug('transformed config %O', this.config);
    autoBind(this);
  } // shorthand use of `juiceResources` with the config
  // (mainly for custom renders like from a database)


  juiceResources(html) {
    return juiceResources(html, this.config.juiceResources);
  } // a simple helper function that gets the actual file path for the template


  getTemplatePath(template) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const _ref = path.isAbsolute(template) ? [path.dirname(template), path.basename(template)] : [_this.config.views.root, template],
            _ref2 = _slicedToArray(_ref, 2),
            root = _ref2[0],
            view = _ref2[1];

      const paths = yield getPaths(root, view, _this.config.views.options.extension);
      const filePath = path.resolve(root, paths.rel);
      return {
        filePath,
        paths
      };
    })();
  } // returns true or false if a template exists
  // (uses same look-up approach as `render` function)


  templateExists(view) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      try {
        const _ref3 = yield _this2.getTemplatePath(view),
              filePath = _ref3.filePath;

        const stats = yield stat(filePath);
        if (!stats.isFile()) throw new Error(`${filePath} was not a file`);
        return true;
      } catch (err) {
        debug('templateExists', err);
        return false;
      }
    })();
  } // promise version of consolidate's render
  // inspired by koa-views and re-uses the same config
  // <https://github.com/queckezz/koa-views>


  render(view, locals = {}) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const _this3$config$views$o = _this3.config.views.options,
            map = _this3$config$views$o.map,
            engineSource = _this3$config$views$o.engineSource;

      const _ref4 = yield _this3.getTemplatePath(view),
            filePath = _ref4.filePath,
            paths = _ref4.paths;

      if (paths.ext === 'html' && !map) {
        const res = yield readFile(filePath, 'utf8');
        return res;
      }

      const engineName = map && map[paths.ext] ? map[paths.ext] : paths.ext;
      const renderFn = engineSource[engineName];
      if (!engineName || !renderFn) throw new Error(`Engine not found for the ".${paths.ext}" file extension`);

      if (_.isObject(_this3.config.i18n)) {
        const i18n = new I18N(Object.assign({}, _this3.config.i18n, {
          register: locals
        })); // support `locals.user.last_locale`
        // (e.g. for <https://lad.js.org>)

        if (_.isObject(locals.user) && _.isString(locals.user.last_locale)) locals.locale = locals.user.last_locale;
        if (_.isString(locals.locale)) i18n.setLocale(locals.locale);
      }

      const res = yield _Promise.promisify(renderFn)(filePath, locals); // transform the html with juice using remote paths
      // google now supports media queries
      // https://developers.google.com/gmail/design/reference/supported_css

      if (!_this3.config.juice) return res;
      const html = yield _this3.juiceResources(res);
      return html;
    })();
  }

  renderAll(template, locals = {}, message = {}) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      let subjectTemplateExists = _this4.config.customRender;
      let htmlTemplateExists = _this4.config.customRender;
      let textTemplateExists = _this4.config.customRender;
      const promises = [_this4.templateExists(`${template}/subject`), _this4.templateExists(`${template}/html`), _this4.templateExists(`${template}/text`)];

      if (template && !_this4.config.customRender) {
        var _ref5 = yield _Promise.all(promises);

        var _ref6 = _slicedToArray(_ref5, 3);

        subjectTemplateExists = _ref6[0];
        htmlTemplateExists = _ref6[1];
        textTemplateExists = _ref6[2];
      }

      if (!message.subject && subjectTemplateExists) {
        message.subject = yield _this4.render(`${template}/subject`, Object.assign({}, locals, {
          pretty: false
        }));
        message.subject = message.subject.trim();
      }

      if (message.subject && _this4.config.subjectPrefix) message.subject = _this4.config.subjectPrefix + message.subject;
      if (!message.html && htmlTemplateExists) message.html = yield _this4.render(`${template}/html`, locals);
      if (!message.text && textTemplateExists) message.text = yield _this4.render(`${template}/text`, Object.assign({}, locals, {
        pretty: false
      }));
      if (_this4.config.htmlToText && message.html && !message.text) // we'd use nodemailer-html-to-text plugin
        // but we really don't need to support cid
        // <https://github.com/andris9/nodemailer-html-to-text>
        message.text = htmlToText.fromString(message.html, _this4.config.htmlToText); // if we only want a text-based version of the email

      if (_this4.config.textOnly) delete message.html;
      return message;
    })();
  }

  send(options = {}) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      options = Object.assign({
        template: '',
        message: {},
        locals: {}
      }, options);
      let _options = options,
          template = _options.template,
          message = _options.message,
          locals = _options.locals;
      const attachments = message.attachments || _this5.config.message.attachments || [];
      message = _.defaultsDeep({}, _.omit(message, 'attachments'), _.omit(_this5.config.message, 'attachments'));
      locals = _.defaultsDeep({}, _this5.config.views.locals, locals);
      if (attachments) message.attachments = attachments;
      debug('template %s', template);
      debug('message %O', message);
      debug('locals (keys only): %O', Object.keys(locals)); // get all available templates

      const obj = yield _this5.renderAll(template, locals, message); // assign the object variables over to the message

      Object.assign(message, obj);

      if (_this5.config.preview) {
        debug('using `preview-email` to preview email');
        yield previewEmail(message);
      }

      if (!_this5.config.send) {
        debug('send disabled so we are ensuring JSONTransport'); // <https://github.com/nodemailer/nodemailer/issues/798>
        // if (this.config.transport.name !== 'JSONTransport')

        _this5.config.transport = nodemailer.createTransport({
          jsonTransport: true
        });
      }

      const res = yield _this5.config.transport.sendMail(message);
      debug('message sent');
      res.originalMessage = message;
      return res;
    })();
  }

}

module.exports = Email;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwiZGVidWciLCJodG1sVG9UZXh0IiwiSTE4TiIsImF1dG9CaW5kIiwibm9kZW1haWxlciIsImNvbnNvbGlkYXRlIiwicHJldmlld0VtYWlsIiwiXyIsIlByb21pc2UiLCJnZXRQYXRocyIsImp1aWNlUmVzb3VyY2VzIiwiZW52IiwicHJvY2VzcyIsIk5PREVfRU5WIiwidG9Mb3dlckNhc2UiLCJzdGF0IiwicHJvbWlzaWZ5IiwicmVhZEZpbGUiLCJFbWFpbCIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwianVpY2VPcHRpb25zIiwiZGlzYWJsZUp1aWNlIiwianVpY2UiLCJyZW5kZXIiLCJjdXN0b21SZW5kZXIiLCJtZXJnZSIsInZpZXdzIiwicm9vdCIsInJlc29sdmUiLCJvcHRpb25zIiwiZXh0ZW5zaW9uIiwibWFwIiwiaGJzIiwibmprIiwiZW5naW5lU291cmNlIiwibG9jYWxzIiwicHJldHR5IiwibWVzc2FnZSIsInNlbmQiLCJpbmNsdWRlcyIsInByZXZpZXciLCJpMThuIiwiYmluZCIsInRleHRPbmx5IiwiaWdub3JlSW1hZ2UiLCJzdWJqZWN0UHJlZml4IiwicHJlc2VydmVJbXBvcnRhbnQiLCJ3ZWJSZXNvdXJjZXMiLCJyZWxhdGl2ZVRvIiwiaW1hZ2VzIiwidHJhbnNwb3J0IiwiaXNGdW5jdGlvbiIsInNlbmRNYWlsIiwiY3JlYXRlVHJhbnNwb3J0IiwiaHRtbCIsImdldFRlbXBsYXRlUGF0aCIsInRlbXBsYXRlIiwiaXNBYnNvbHV0ZSIsImRpcm5hbWUiLCJiYXNlbmFtZSIsInZpZXciLCJwYXRocyIsImZpbGVQYXRoIiwicmVsIiwidGVtcGxhdGVFeGlzdHMiLCJzdGF0cyIsImlzRmlsZSIsIkVycm9yIiwiZXJyIiwiZXh0IiwicmVzIiwiZW5naW5lTmFtZSIsInJlbmRlckZuIiwiaXNPYmplY3QiLCJPYmplY3QiLCJhc3NpZ24iLCJyZWdpc3RlciIsInVzZXIiLCJpc1N0cmluZyIsImxhc3RfbG9jYWxlIiwibG9jYWxlIiwic2V0TG9jYWxlIiwicmVuZGVyQWxsIiwic3ViamVjdFRlbXBsYXRlRXhpc3RzIiwiaHRtbFRlbXBsYXRlRXhpc3RzIiwidGV4dFRlbXBsYXRlRXhpc3RzIiwicHJvbWlzZXMiLCJhbGwiLCJzdWJqZWN0IiwidHJpbSIsInRleHQiLCJmcm9tU3RyaW5nIiwiYXR0YWNobWVudHMiLCJkZWZhdWx0c0RlZXAiLCJvbWl0Iiwia2V5cyIsIm9iaiIsImpzb25UcmFuc3BvcnQiLCJvcmlnaW5hbE1lc3NhZ2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLE1BQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxLQUFLLEdBQUdGLE9BQU8sQ0FBQyxPQUFELENBQVAsQ0FBaUIsaUJBQWpCLENBQWQ7O0FBQ0EsTUFBTUcsVUFBVSxHQUFHSCxPQUFPLENBQUMsY0FBRCxDQUExQjs7QUFDQSxNQUFNSSxJQUFJLEdBQUdKLE9BQU8sQ0FBQyxhQUFELENBQXBCOztBQUNBLE1BQU1LLFFBQVEsR0FBR0wsT0FBTyxDQUFDLFdBQUQsQ0FBeEI7O0FBQ0EsTUFBTU0sVUFBVSxHQUFHTixPQUFPLENBQUMsWUFBRCxDQUExQjs7QUFDQSxNQUFNTyxXQUFXLEdBQUdQLE9BQU8sQ0FBQyxhQUFELENBQTNCOztBQUNBLE1BQU1RLFlBQVksR0FBR1IsT0FBTyxDQUFDLGVBQUQsQ0FBNUI7O0FBQ0EsTUFBTVMsQ0FBQyxHQUFHVCxPQUFPLENBQUMsUUFBRCxDQUFqQjs7QUFDQSxNQUFNVSxRQUFPLEdBQUdWLE9BQU8sQ0FBQyxVQUFELENBQXZCOztBQUVBLE1BQU1XLFFBQVEsR0FBR1gsT0FBTyxDQUFDLFdBQUQsQ0FBeEI7O0FBQ0EsTUFBTVksY0FBYyxHQUFHWixPQUFPLENBQUMseUJBQUQsQ0FBOUI7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R0FBUDtBQW5EdUI7QUFvRHhCOztBQXRRUzs7QUF5UVo2QixNQUFNLENBQUNDLE9BQVAsR0FBaUJuRixLQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VtYWlsLXRlbXBsYXRlcycpO1xuY29uc3QgaHRtbFRvVGV4dCA9IHJlcXVpcmUoJ2h0bWwtdG8tdGV4dCcpO1xuY29uc3QgSTE4TiA9IHJlcXVpcmUoJ0BsYWRqcy9pMThuJyk7XG5jb25zdCBhdXRvQmluZCA9IHJlcXVpcmUoJ2F1dG8tYmluZCcpO1xuY29uc3Qgbm9kZW1haWxlciA9IHJlcXVpcmUoJ25vZGVtYWlsZXInKTtcbmNvbnN0IGNvbnNvbGlkYXRlID0gcmVxdWlyZSgnY29uc29saWRhdGUnKTtcbmNvbnN0IHByZXZpZXdFbWFpbCA9IHJlcXVpcmUoJ3ByZXZpZXctZW1haWwnKTtcbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0IFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuXG5jb25zdCBnZXRQYXRocyA9IHJlcXVpcmUoJ2dldC1wYXRocycpO1xuY29uc3QganVpY2VSZXNvdXJjZXMgPSByZXF1aXJlKCdqdWljZS1yZXNvdXJjZXMtcHJvbWlzZScpO1xuXG5jb25zdCBlbnYgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgJ2RldmVsb3BtZW50JykudG9Mb3dlckNhc2UoKTtcbmNvbnN0IHN0YXQgPSBQcm9taXNlLnByb21pc2lmeShmcy5zdGF0KTtcbmNvbnN0IHJlYWRGaWxlID0gUHJvbWlzZS5wcm9taXNpZnkoZnMucmVhZEZpbGUpO1xuXG5jbGFzcyBFbWFpbCB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XG4gICAgZGVidWcoJ2NvbmZpZyBwYXNzZWQgJU8nLCBjb25maWcpO1xuXG4gICAgLy8gMi54IGJhY2t3YXJkcyBjb21wYXRpYmxlIHN1cHBvcnRcbiAgICBpZiAoY29uZmlnLmp1aWNlT3B0aW9ucykge1xuICAgICAgY29uZmlnLmp1aWNlUmVzb3VyY2VzID0gY29uZmlnLmp1aWNlT3B0aW9ucztcbiAgICAgIGRlbGV0ZSBjb25maWcuanVpY2VPcHRpb25zO1xuICAgIH1cbiAgICBpZiAoY29uZmlnLmRpc2FibGVKdWljZSkge1xuICAgICAgY29uZmlnLmp1aWNlID0gZmFsc2U7XG4gICAgICBkZWxldGUgY29uZmlnLmRpc2FibGVKdWljZTtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5yZW5kZXIpIHtcbiAgICAgIGNvbmZpZy5jdXN0b21SZW5kZXIgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuY29uZmlnID0gXy5tZXJnZShcbiAgICAgIHtcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAvLyBkaXJlY3Rvcnkgd2hlcmUgZW1haWwgdGVtcGxhdGVzIHJlc2lkZVxuICAgICAgICAgIHJvb3Q6IHBhdGgucmVzb2x2ZSgnZW1haWxzJyksXG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgLy8gZGVmYXVsdCBmaWxlIGV4dGVuc2lvbiBmb3IgdGVtcGxhdGVcbiAgICAgICAgICAgIGV4dGVuc2lvbjogJ3B1ZycsXG4gICAgICAgICAgICBtYXA6IHtcbiAgICAgICAgICAgICAgaGJzOiAnaGFuZGxlYmFycycsXG4gICAgICAgICAgICAgIG5qazogJ251bmp1Y2tzJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVuZ2luZVNvdXJjZTogY29uc29saWRhdGVcbiAgICAgICAgICB9LFxuICAgICAgICAgIC8vIGxvY2FscyB0byBwYXNzIHRvIHRlbXBsYXRlcyBmb3IgcmVuZGVyaW5nXG4gICAgICAgICAgbG9jYWxzOiB7XG4gICAgICAgICAgICAvLyBwcmV0dHkgaXMgYXV0b21hdGljYWxseSBzZXQgdG8gYGZhbHNlYCBmb3Igc3ViamVjdC90ZXh0XG4gICAgICAgICAgICBwcmV0dHk6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIDxodHRwczovL25vZGVtYWlsZXIuY29tL21lc3NhZ2UvPlxuICAgICAgICBtZXNzYWdlOiB7fSxcbiAgICAgICAgc2VuZDogIVsnZGV2ZWxvcG1lbnQnLCAndGVzdCddLmluY2x1ZGVzKGVudiksXG4gICAgICAgIHByZXZpZXc6IGVudiA9PT0gJ2RldmVsb3BtZW50JyxcbiAgICAgICAgLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9sYWRqcy9pMThuPlxuICAgICAgICAvLyBzZXQgdG8gYW4gb2JqZWN0IHRvIGNvbmZpZ3VyZSBhbmQgZW5hYmxlIGl0XG4gICAgICAgIGkxOG46IGZhbHNlLFxuICAgICAgICAvLyBwYXNzIGEgY3VzdG9tIHJlbmRlciBmdW5jdGlvbiBpZiBuZWNlc3NhcnlcbiAgICAgICAgcmVuZGVyOiB0aGlzLnJlbmRlci5iaW5kKHRoaXMpLFxuICAgICAgICBjdXN0b21SZW5kZXI6IGZhbHNlLFxuICAgICAgICAvLyBmb3JjZSB0ZXh0LW9ubHkgcmVuZGVyaW5nIG9mIHRlbXBsYXRlIChkaXNyZWdhcmRzIHRlbXBsYXRlIGZvbGRlcilcbiAgICAgICAgdGV4dE9ubHk6IGZhbHNlLFxuICAgICAgICAvLyA8aHR0cHM6Ly9naXRodWIuY29tL3dlcms4NS9ub2RlLWh0bWwtdG8tdGV4dD5cbiAgICAgICAgaHRtbFRvVGV4dDoge1xuICAgICAgICAgIGlnbm9yZUltYWdlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHN1YmplY3RQcmVmaXg6IGZhbHNlLFxuICAgICAgICAvLyA8aHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvanVpY2U+XG4gICAgICAgIGp1aWNlOiB0cnVlLFxuICAgICAgICBqdWljZVJlc291cmNlczoge1xuICAgICAgICAgIHByZXNlcnZlSW1wb3J0YW50OiB0cnVlLFxuICAgICAgICAgIHdlYlJlc291cmNlczoge1xuICAgICAgICAgICAgcmVsYXRpdmVUbzogcGF0aC5yZXNvbHZlKCdidWlsZCcpLFxuICAgICAgICAgICAgaW1hZ2VzOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gcGFzcyBhIHRyYW5zcG9ydCBjb25maWd1cmF0aW9uIG9iamVjdCBvciBhIHRyYW5zcG9ydCBpbnN0YW5jZVxuICAgICAgICAvLyAoZS5nLiBhbiBpbnN0YW5jZSBpcyBjcmVhdGVkIHZpYSBgbm9kZW1haWxlci5jcmVhdGVUcmFuc3BvcnRgKVxuICAgICAgICAvLyA8aHR0cHM6Ly9ub2RlbWFpbGVyLmNvbS90cmFuc3BvcnRzLz5cbiAgICAgICAgdHJhbnNwb3J0OiB7fVxuICAgICAgfSxcbiAgICAgIGNvbmZpZ1xuICAgICk7XG5cbiAgICAvLyBvdmVycmlkZSBleGlzdGluZyBtZXRob2RcbiAgICB0aGlzLnJlbmRlciA9IHRoaXMuY29uZmlnLnJlbmRlcjtcblxuICAgIGlmICghXy5pc0Z1bmN0aW9uKHRoaXMuY29uZmlnLnRyYW5zcG9ydC5zZW5kTWFpbCkpXG4gICAgICB0aGlzLmNvbmZpZy50cmFuc3BvcnQgPSBub2RlbWFpbGVyLmNyZWF0ZVRyYW5zcG9ydCh0aGlzLmNvbmZpZy50cmFuc3BvcnQpO1xuXG4gICAgZGVidWcoJ3RyYW5zZm9ybWVkIGNvbmZpZyAlTycsIHRoaXMuY29uZmlnKTtcblxuICAgIGF1dG9CaW5kKHRoaXMpO1xuICB9XG5cbiAgLy8gc2hvcnRoYW5kIHVzZSBvZiBganVpY2VSZXNvdXJjZXNgIHdpdGggdGhlIGNvbmZpZ1xuICAvLyAobWFpbmx5IGZvciBjdXN0b20gcmVuZGVycyBsaWtlIGZyb20gYSBkYXRhYmFzZSlcbiAganVpY2VSZXNvdXJjZXMoaHRtbCkge1xuICAgIHJldHVybiBqdWljZVJlc291cmNlcyhodG1sLCB0aGlzLmNvbmZpZy5qdWljZVJlc291cmNlcyk7XG4gIH1cblxuICAvLyBhIHNpbXBsZSBoZWxwZXIgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhY3R1YWwgZmlsZSBwYXRoIGZvciB0aGUgdGVtcGxhdGVcbiAgYXN5bmMgZ2V0VGVtcGxhdGVQYXRoKHRlbXBsYXRlKSB7XG4gICAgY29uc3QgW3Jvb3QsIHZpZXddID0gcGF0aC5pc0Fic29sdXRlKHRlbXBsYXRlKVxuICAgICAgPyBbcGF0aC5kaXJuYW1lKHRlbXBsYXRlKSwgcGF0aC5iYXNlbmFtZSh0ZW1wbGF0ZSldXG4gICAgICA6IFt0aGlzLmNvbmZpZy52aWV3cy5yb290LCB0ZW1wbGF0ZV07XG4gICAgY29uc3QgcGF0aHMgPSBhd2FpdCBnZXRQYXRocyhcbiAgICAgIHJvb3QsXG4gICAgICB2aWV3LFxuICAgICAgdGhpcy5jb25maWcudmlld3Mub3B0aW9ucy5leHRlbnNpb25cbiAgICApO1xuICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKHJvb3QsIHBhdGhzLnJlbCk7XG4gICAgcmV0dXJuIHsgZmlsZVBhdGgsIHBhdGhzIH07XG4gIH1cblxuICAvLyByZXR1cm5zIHRydWUgb3IgZmFsc2UgaWYgYSB0ZW1wbGF0ZSBleGlzdHNcbiAgLy8gKHVzZXMgc2FtZSBsb29rLXVwIGFwcHJvYWNoIGFzIGByZW5kZXJgIGZ1bmN0aW9uKVxuICBhc3luYyB0ZW1wbGF0ZUV4aXN0cyh2aWV3KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZmlsZVBhdGggfSA9IGF3YWl0IHRoaXMuZ2V0VGVtcGxhdGVQYXRoKHZpZXcpO1xuICAgICAgY29uc3Qgc3RhdHMgPSBhd2FpdCBzdGF0KGZpbGVQYXRoKTtcbiAgICAgIGlmICghc3RhdHMuaXNGaWxlKCkpIHRocm93IG5ldyBFcnJvcihgJHtmaWxlUGF0aH0gd2FzIG5vdCBhIGZpbGVgKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZGVidWcoJ3RlbXBsYXRlRXhpc3RzJywgZXJyKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBwcm9taXNlIHZlcnNpb24gb2YgY29uc29saWRhdGUncyByZW5kZXJcbiAgLy8gaW5zcGlyZWQgYnkga29hLXZpZXdzIGFuZCByZS11c2VzIHRoZSBzYW1lIGNvbmZpZ1xuICAvLyA8aHR0cHM6Ly9naXRodWIuY29tL3F1ZWNrZXp6L2tvYS12aWV3cz5cbiAgYXN5bmMgcmVuZGVyKHZpZXcsIGxvY2FscyA9IHt9KSB7XG4gICAgY29uc3QgeyBtYXAsIGVuZ2luZVNvdXJjZSB9ID0gdGhpcy5jb25maWcudmlld3Mub3B0aW9ucztcbiAgICBjb25zdCB7IGZpbGVQYXRoLCBwYXRocyB9ID0gYXdhaXQgdGhpcy5nZXRUZW1wbGF0ZVBhdGgodmlldyk7XG4gICAgaWYgKHBhdGhzLmV4dCA9PT0gJ2h0bWwnICYmICFtYXApIHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlYWRGaWxlKGZpbGVQYXRoLCAndXRmOCcpO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgY29uc3QgZW5naW5lTmFtZSA9IG1hcCAmJiBtYXBbcGF0aHMuZXh0XSA/IG1hcFtwYXRocy5leHRdIDogcGF0aHMuZXh0O1xuICAgIGNvbnN0IHJlbmRlckZuID0gZW5naW5lU291cmNlW2VuZ2luZU5hbWVdO1xuICAgIGlmICghZW5naW5lTmFtZSB8fCAhcmVuZGVyRm4pXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBFbmdpbmUgbm90IGZvdW5kIGZvciB0aGUgXCIuJHtwYXRocy5leHR9XCIgZmlsZSBleHRlbnNpb25gXG4gICAgICApO1xuXG4gICAgaWYgKF8uaXNPYmplY3QodGhpcy5jb25maWcuaTE4bikpIHtcbiAgICAgIGNvbnN0IGkxOG4gPSBuZXcgSTE4TihcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWcuaTE4biwge1xuICAgICAgICAgIHJlZ2lzdGVyOiBsb2NhbHNcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIC8vIHN1cHBvcnQgYGxvY2Fscy51c2VyLmxhc3RfbG9jYWxlYFxuICAgICAgLy8gKGUuZy4gZm9yIDxodHRwczovL2xhZC5qcy5vcmc+KVxuICAgICAgaWYgKF8uaXNPYmplY3QobG9jYWxzLnVzZXIpICYmIF8uaXNTdHJpbmcobG9jYWxzLnVzZXIubGFzdF9sb2NhbGUpKVxuICAgICAgICBsb2NhbHMubG9jYWxlID0gbG9jYWxzLnVzZXIubGFzdF9sb2NhbGU7XG5cbiAgICAgIGlmIChfLmlzU3RyaW5nKGxvY2Fscy5sb2NhbGUpKSBpMThuLnNldExvY2FsZShsb2NhbHMubG9jYWxlKTtcbiAgICB9XG5cbiAgICBjb25zdCByZXMgPSBhd2FpdCBQcm9taXNlLnByb21pc2lmeShyZW5kZXJGbikoZmlsZVBhdGgsIGxvY2Fscyk7XG4gICAgLy8gdHJhbnNmb3JtIHRoZSBodG1sIHdpdGgganVpY2UgdXNpbmcgcmVtb3RlIHBhdGhzXG4gICAgLy8gZ29vZ2xlIG5vdyBzdXBwb3J0cyBtZWRpYSBxdWVyaWVzXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vZ21haWwvZGVzaWduL3JlZmVyZW5jZS9zdXBwb3J0ZWRfY3NzXG4gICAgaWYgKCF0aGlzLmNvbmZpZy5qdWljZSkgcmV0dXJuIHJlcztcbiAgICBjb25zdCBodG1sID0gYXdhaXQgdGhpcy5qdWljZVJlc291cmNlcyhyZXMpO1xuICAgIHJldHVybiBodG1sO1xuICB9XG5cbiAgYXN5bmMgcmVuZGVyQWxsKHRlbXBsYXRlLCBsb2NhbHMgPSB7fSwgbWVzc2FnZSA9IHt9KSB7XG4gICAgbGV0IHN1YmplY3RUZW1wbGF0ZUV4aXN0cyA9IHRoaXMuY29uZmlnLmN1c3RvbVJlbmRlcjtcbiAgICBsZXQgaHRtbFRlbXBsYXRlRXhpc3RzID0gdGhpcy5jb25maWcuY3VzdG9tUmVuZGVyO1xuICAgIGxldCB0ZXh0VGVtcGxhdGVFeGlzdHMgPSB0aGlzLmNvbmZpZy5jdXN0b21SZW5kZXI7XG5cbiAgICBjb25zdCBwcm9taXNlcyA9IFtcbiAgICAgIHRoaXMudGVtcGxhdGVFeGlzdHMoYCR7dGVtcGxhdGV9L3N1YmplY3RgKSxcbiAgICAgIHRoaXMudGVtcGxhdGVFeGlzdHMoYCR7dGVtcGxhdGV9L2h0bWxgKSxcbiAgICAgIHRoaXMudGVtcGxhdGVFeGlzdHMoYCR7dGVtcGxhdGV9L3RleHRgKVxuICAgIF07XG5cbiAgICBpZiAodGVtcGxhdGUgJiYgIXRoaXMuY29uZmlnLmN1c3RvbVJlbmRlcilcbiAgICAgIFtcbiAgICAgICAgc3ViamVjdFRlbXBsYXRlRXhpc3RzLFxuICAgICAgICBodG1sVGVtcGxhdGVFeGlzdHMsXG4gICAgICAgIHRleHRUZW1wbGF0ZUV4aXN0c1xuICAgICAgXSA9IGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcblxuICAgIGlmICghbWVzc2FnZS5zdWJqZWN0ICYmIHN1YmplY3RUZW1wbGF0ZUV4aXN0cykge1xuICAgICAgbWVzc2FnZS5zdWJqZWN0ID0gYXdhaXQgdGhpcy5yZW5kZXIoXG4gICAgICAgIGAke3RlbXBsYXRlfS9zdWJqZWN0YCxcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxzLCB7IHByZXR0eTogZmFsc2UgfSlcbiAgICAgICk7XG4gICAgICBtZXNzYWdlLnN1YmplY3QgPSBtZXNzYWdlLnN1YmplY3QudHJpbSgpO1xuICAgIH1cblxuICAgIGlmIChtZXNzYWdlLnN1YmplY3QgJiYgdGhpcy5jb25maWcuc3ViamVjdFByZWZpeClcbiAgICAgIG1lc3NhZ2Uuc3ViamVjdCA9IHRoaXMuY29uZmlnLnN1YmplY3RQcmVmaXggKyBtZXNzYWdlLnN1YmplY3Q7XG5cbiAgICBpZiAoIW1lc3NhZ2UuaHRtbCAmJiBodG1sVGVtcGxhdGVFeGlzdHMpXG4gICAgICBtZXNzYWdlLmh0bWwgPSBhd2FpdCB0aGlzLnJlbmRlcihgJHt0ZW1wbGF0ZX0vaHRtbGAsIGxvY2Fscyk7XG5cbiAgICBpZiAoIW1lc3NhZ2UudGV4dCAmJiB0ZXh0VGVtcGxhdGVFeGlzdHMpXG4gICAgICBtZXNzYWdlLnRleHQgPSBhd2FpdCB0aGlzLnJlbmRlcihcbiAgICAgICAgYCR7dGVtcGxhdGV9L3RleHRgLFxuICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBsb2NhbHMsIHsgcHJldHR5OiBmYWxzZSB9KVxuICAgICAgKTtcblxuICAgIGlmICh0aGlzLmNvbmZpZy5odG1sVG9UZXh0ICYmIG1lc3NhZ2UuaHRtbCAmJiAhbWVzc2FnZS50ZXh0KVxuICAgICAgLy8gd2UnZCB1c2Ugbm9kZW1haWxlci1odG1sLXRvLXRleHQgcGx1Z2luXG4gICAgICAvLyBidXQgd2UgcmVhbGx5IGRvbid0IG5lZWQgdG8gc3VwcG9ydCBjaWRcbiAgICAgIC8vIDxodHRwczovL2dpdGh1Yi5jb20vYW5kcmlzOS9ub2RlbWFpbGVyLWh0bWwtdG8tdGV4dD5cbiAgICAgIG1lc3NhZ2UudGV4dCA9IGh0bWxUb1RleHQuZnJvbVN0cmluZyhcbiAgICAgICAgbWVzc2FnZS5odG1sLFxuICAgICAgICB0aGlzLmNvbmZpZy5odG1sVG9UZXh0XG4gICAgICApO1xuXG4gICAgLy8gaWYgd2Ugb25seSB3YW50IGEgdGV4dC1iYXNlZCB2ZXJzaW9uIG9mIHRoZSBlbWFpbFxuICAgIGlmICh0aGlzLmNvbmZpZy50ZXh0T25seSkgZGVsZXRlIG1lc3NhZ2UuaHRtbDtcblxuICAgIHJldHVybiBtZXNzYWdlO1xuICB9XG5cbiAgYXN5bmMgc2VuZChvcHRpb25zID0ge30pIHtcbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHtcbiAgICAgICAgdGVtcGxhdGU6ICcnLFxuICAgICAgICBtZXNzYWdlOiB7fSxcbiAgICAgICAgbG9jYWxzOiB7fVxuICAgICAgfSxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuXG4gICAgbGV0IHsgdGVtcGxhdGUsIG1lc3NhZ2UsIGxvY2FscyB9ID0gb3B0aW9ucztcblxuICAgIGNvbnN0IGF0dGFjaG1lbnRzID1cbiAgICAgIG1lc3NhZ2UuYXR0YWNobWVudHMgfHwgdGhpcy5jb25maWcubWVzc2FnZS5hdHRhY2htZW50cyB8fCBbXTtcblxuICAgIG1lc3NhZ2UgPSBfLmRlZmF1bHRzRGVlcChcbiAgICAgIHt9LFxuICAgICAgXy5vbWl0KG1lc3NhZ2UsICdhdHRhY2htZW50cycpLFxuICAgICAgXy5vbWl0KHRoaXMuY29uZmlnLm1lc3NhZ2UsICdhdHRhY2htZW50cycpXG4gICAgKTtcbiAgICBsb2NhbHMgPSBfLmRlZmF1bHRzRGVlcCh7fSwgdGhpcy5jb25maWcudmlld3MubG9jYWxzLCBsb2NhbHMpO1xuXG4gICAgaWYgKGF0dGFjaG1lbnRzKSBtZXNzYWdlLmF0dGFjaG1lbnRzID0gYXR0YWNobWVudHM7XG5cbiAgICBkZWJ1ZygndGVtcGxhdGUgJXMnLCB0ZW1wbGF0ZSk7XG4gICAgZGVidWcoJ21lc3NhZ2UgJU8nLCBtZXNzYWdlKTtcbiAgICBkZWJ1ZygnbG9jYWxzIChrZXlzIG9ubHkpOiAlTycsIE9iamVjdC5rZXlzKGxvY2FscykpO1xuXG4gICAgLy8gZ2V0IGFsbCBhdmFpbGFibGUgdGVtcGxhdGVzXG4gICAgY29uc3Qgb2JqID0gYXdhaXQgdGhpcy5yZW5kZXJBbGwodGVtcGxhdGUsIGxvY2FscywgbWVzc2FnZSk7XG5cbiAgICAvLyBhc3NpZ24gdGhlIG9iamVjdCB2YXJpYWJsZXMgb3ZlciB0byB0aGUgbWVzc2FnZVxuICAgIE9iamVjdC5hc3NpZ24obWVzc2FnZSwgb2JqKTtcblxuICAgIGlmICh0aGlzLmNvbmZpZy5wcmV2aWV3KSB7XG4gICAgICBkZWJ1ZygndXNpbmcgYHByZXZpZXctZW1haWxgIHRvIHByZXZpZXcgZW1haWwnKTtcbiAgICAgIGF3YWl0IHByZXZpZXdFbWFpbChtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY29uZmlnLnNlbmQpIHtcbiAgICAgIGRlYnVnKCdzZW5kIGRpc2FibGVkIHNvIHdlIGFyZSBlbnN1cmluZyBKU09OVHJhbnNwb3J0Jyk7XG4gICAgICAvLyA8aHR0cHM6Ly9naXRodWIuY29tL25vZGVtYWlsZXIvbm9kZW1haWxlci9pc3N1ZXMvNzk4PlxuICAgICAgLy8gaWYgKHRoaXMuY29uZmlnLnRyYW5zcG9ydC5uYW1lICE9PSAnSlNPTlRyYW5zcG9ydCcpXG4gICAgICB0aGlzLmNvbmZpZy50cmFuc3BvcnQgPSBub2RlbWFpbGVyLmNyZWF0ZVRyYW5zcG9ydCh7XG4gICAgICAgIGpzb25UcmFuc3BvcnQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuY29uZmlnLnRyYW5zcG9ydC5zZW5kTWFpbChtZXNzYWdlKTtcbiAgICBkZWJ1ZygnbWVzc2FnZSBzZW50Jyk7XG4gICAgcmVzLm9yaWdpbmFsTWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVtYWlsO1xuIl19